@page "/"

<div style="text-align:center">
    <h1>Dice Calculator</h1>
</div>

<br />
<br />
<br />
<br />

<div class="container" style="margin:0; max-width:100%">
    <EditForm Model="@exampleModel">
        <div class="row">
            <div class="col"></div>
            <div class="col-5">
                <div class="row">
                    <h5 class="col text-center">Dice Expression</h5>
                </div>
                <div class="row">
                    <InputText class="col-12 col-md-auto" style="flex-grow:2" @bind-Value="diceExpressionInput" />
                    <button class="btn btn-primary col-12 col-md-auto" @onclick="CalculateDiceRoll">Calculate</button>
                    <button class="btn btn-secondary col-12 col-md-auto" @onclick="RollDice">Roll</button>
                </div>

                @if (useRollOutput && rollOutput != null)
                {
                    foreach (var drr in rollOutput.Item1)
                    {
                        <div class="row" style="margin-top:10px; border-bottom:1px solid black; justify-content:space-between">
                            <div class="col" style="padding:0">
                                <p style="margin-bottom:0">
                                    @foreach (var roll in drr.Rolls)
                                    {
                                        var style = "padding:1px 5px;";
                                        if ((roll.Item2 & DieRollOutput.Dropped) == DieRollOutput.Dropped)
                                        {
                                            style += "opacity:0.4;";
                                        }
                                        if ((roll.Item2 & DieRollOutput.CritFailure) == DieRollOutput.CritFailure)
                                        {
                                            style += "background-color:lightcoral; color:red;";
                                        }
                                        else if ((roll.Item2 & DieRollOutput.CritSuccess) == DieRollOutput.CritSuccess)
                                        {
                                            style += "background-color:lightgreen; color:green;";
                                        }
                                        else
                                        {
                                            style += "background-color:lightgray;";
                                        }
                                        <span style=@style>@roll.Item1</span>
                                    }
                                </p>
                            </div>
                            <div class="col-auto" style="padding-right:0; align-self:flex-end">
                                <p style="border:1px solid black; padding:0px 5px; border-bottom:0; border-top-left-radius:5px; margin-bottom:0">@drr.Sum</p>
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top:10px; justify-content:space-evenly">
                        <p style="border:1px solid black; padding:0px 5px; width:100%; text-align:center">
                            @if (rollOutput.Item1.Length == 1)
                            {
                                <span style="padding:1px 3px; background-color:lightgray">@rollOutput.Item2</span>
                            }
                            else
                            {
                                <span>@rollOutput.Item1[0].Sum</span>
                                for (var i = 1; i < rollOutput.Item1.Length; i++)
                                {
                                    var drr = rollOutput.Item1[i];
                                    <span>@drr.Operation @drr.Sum</span>
                                }
                                <span>=</span>
                                <span style="padding:1px 3px; background-color:lightgray">@rollOutput.Item2</span>
                            }
                        </p>
                    </div>
                }
                else if (diceExpressionOutput != null)
                {
                    if (diceExpressionOutput.Min != 0 || diceExpressionOutput.Avg != 0 || diceExpressionOutput.Max != 0)
                    {
                        <div class="row" style="margin-top:10px; justify-content: space-evenly">
                            <p>Min: @diceExpressionOutput.Min</p>
                            <p>Avg: @diceExpressionOutput.Avg</p>
                            <p>Max: @diceExpressionOutput.Max</p>
                        </div>
                        <div class="row" style="margin-top:10px; justify-content: space-evenly">
                            <button class="btn btn-secondary" @onclick="OnGraphButtonClick">@graphButtonText</button>
                        </div>
                    }
                    else
                    {
                        <p style="color: red">Something went wrong. Either something in your input is not yet implemented, or the dice roll is too large to calculate in a decent amount of time.</p>
                    }
                }

                @if (!useRollOutput && diceExpressionOutput != null && diceExpressionOutput.MinMaxCalcs != null && shouldShowGraph)
                {
                    <table class="row" style="margin:10px 0px 20px 0px; justify-content: space-evenly">
                        <tbody style="width:300px; padding:10px; border:solid 1px black">
                            @foreach (var calc in diceExpressionOutput.MinMaxCalcs)
                            {
                                <tr style="width:inherit">
                                    <td align="right">@calc.Count:</td>
                                    <td style="width:inherit">
                                        <div>
                                            <svg width="@calc.Percentage%" height="25px">
                                                <rect width="100%" height="100%" style="fill:rgb(0, 38, 255)" />
                                            </svg>
                                            <span>@calc.Percentage%</span>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="col-1"></div>
            <div class="col-5">
                <div class="row">
                    <h5 class="col text-center">Min Max</h5>
                </div>
                <div class="row">
                    <InputText class="col-12 col-md-auto" style="flex-grow:2" @bind-Value="minMaxInput" />
                    <button class="btn btn-primary col-12 col-md-auto" @onclick="CalculateMinMax">Calculate</button>
                </div>
                <div class="row" style="margin-top:10px; justify-content: center">
                    @if (minMaxOutput != null)
                    {
                        if (minMaxOutput.DiceRolls != null && minMaxOutput.Modifiers != null)
                        {
                            @foreach (var dieRoll in minMaxOutput.DiceRolls)
                            {
                                string formattedDie = dieRoll.NumDice + "d" + dieRoll.NumDieFaces;
                                <p>@formattedDie</p>
                            }
                            @foreach (var mod in minMaxOutput.Modifiers)
                            {
                                @if (mod.Number != 0)
                                {
                                    <p> @mod.Operation @mod.Number</p>
                                }
                            }
                        }
                        else
                        {
                            <p style="color: red">Something went wrong. Make sure your input is correct and does not use "avg". Calculating based off of avg is not yet implemented.</p>
                        }
                    }
                </div>
            </div>
            <div class="col"></div>
        </div>
    </EditForm>
</div>

@code {
    private ExampleModel exampleModel = new ExampleModel();

    public class ExampleModel { }
}
